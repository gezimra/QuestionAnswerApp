[{"C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\index.tsx":"1","C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\reportWebVitals.ts":"2","C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\App.tsx":"3","C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\HomePage.tsx":"4","C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\Header.tsx":"5","C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\QuestionsData.ts":"6","C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\QuestionList.tsx":"7","C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\Iconss.tsx":"8","C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\Question.tsx":"9","C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\Page.tsx":"10","C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\PageTitle.tsx":"11","C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\Styles.ts":"12","C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\SearchPage.tsx":"13","C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\AskPage.tsx":"14","C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\SignInPage.tsx":"15","C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\NotFoundPage.tsx":"16","C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\QuestionPage.tsx":"17","C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\AnswerList.tsx":"18","C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\Answer.tsx":"19","C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\store.ts":"20"},{"size":518,"mtime":1637847823437,"results":"21","hashOfConfig":"22"},{"size":440,"mtime":1616893301178,"results":"23","hashOfConfig":"22"},{"size":1923,"mtime":1639607547825,"results":"24","hashOfConfig":"22"},{"size":2423,"mtime":1639742366282,"results":"25","hashOfConfig":"22"},{"size":2565,"mtime":1638967728843,"results":"26","hashOfConfig":"22"},{"size":3733,"mtime":1638971873805,"results":"27","hashOfConfig":"22"},{"size":1049,"mtime":1637863438796,"results":"28","hashOfConfig":"22"},{"size":137,"mtime":1637578372967,"results":"29","hashOfConfig":"22"},{"size":1095,"mtime":1637915309152,"results":"30","hashOfConfig":"22"},{"size":480,"mtime":1637865839500,"results":"31","hashOfConfig":"22"},{"size":420,"mtime":1637862072731,"results":"32","hashOfConfig":"22"},{"size":2303,"mtime":1638956985473,"results":"33","hashOfConfig":"22"},{"size":1480,"mtime":1639735709541,"results":"34","hashOfConfig":"22"},{"size":2751,"mtime":1638971312503,"results":"35","hashOfConfig":"22"},{"size":132,"mtime":1637865317523,"results":"36","hashOfConfig":"22"},{"size":141,"mtime":1637866778683,"results":"37","hashOfConfig":"22"},{"size":4662,"mtime":1639742263076,"results":"38","hashOfConfig":"22"},{"size":662,"mtime":1638878876181,"results":"39","hashOfConfig":"22"},{"size":770,"mtime":1638876778384,"results":"40","hashOfConfig":"22"},{"size":3100,"mtime":1639652248742,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"4r539e",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\index.tsx",[],["86","87"],"C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\reportWebVitals.ts",[],"C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\App.tsx",[],"C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\HomePage.tsx",[],"C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\Header.tsx",[],"C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\QuestionsData.ts",["88"],"// import { resolve } from 'dns';\r\n\r\nimport { Answer } from './Answer';\r\n\r\nexport interface QuestionData {\r\n  questionId: number;\r\n  title: string;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n  answers: AnswerData[];\r\n}\r\n\r\nexport interface AnswerData {\r\n  answerId: number;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nconst questions: QuestionData[] = [\r\n  {\r\n    questionId: 1,\r\n    title: 'Why should I learn TypeScript?',\r\n    content: `TypeScript seems to be getting popular so I\r\n             wondered whether it is worth my time learning it?\r\n             What benifits does it give over JavaScript?`,\r\n    userName: 'Bob',\r\n    created: new Date(),\r\n    answers: [\r\n      {\r\n        answerId: 1,\r\n        content: `To catch problems earlier speeding\r\n                        up your developments`,\r\n        userName: 'Jane',\r\n        created: new Date(),\r\n      },\r\n      {\r\n        answerId: 2,\r\n        content: `so, that you can use the JavaScript features\r\n                            of tomorrow, today`,\r\n        userName: 'Fred',\r\n        created: new Date(),\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    questionId: 2,\r\n    title: `Which state management tool should I use?`,\r\n    content: `There seem to be fair few state management\r\n                tools around for React - React, Unstated, ...\r\n                Which one should I use?`,\r\n    userName: 'Bob',\r\n    created: new Date(),\r\n    answers: [],\r\n  },\r\n  {\r\n    questionId: 3,\r\n    title: `Which state management tool should I use?`,\r\n    content: `There seem to be fair few state management\r\n                tools around for React - React, Unstated, ...\r\n                Which one should I use?`,\r\n    userName: 'jack',\r\n    created: new Date(),\r\n    answers: [],\r\n  },\r\n];\r\n\r\nexport const getUnansweredQuestions = async (): Promise<QuestionData[]> => {\r\n  await wait(500);\r\n  return questions.filter((q) => q.answers.length === 0);\r\n};\r\n\r\nexport const getAnsweredQuestions = async (): Promise<QuestionData[]> => {\r\n  await wait(900);\r\n  return questions.filter((q) => q.answers.length > 0);\r\n};\r\n\r\nconst wait = (ms: number): Promise<void> => {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n};\r\n\r\nexport const getQuestion = async (\r\n  questionId: number,\r\n): Promise<QuestionData | null> => {\r\n  await wait(500);\r\n  const results = questions.filter((q) => q.questionId === questionId);\r\n  return results.length === 0 ? null : results[0];\r\n};\r\n\r\nexport const searchQuestions = async (\r\n  critera: string,\r\n): Promise<QuestionData[]> => {\r\n  await wait(500);\r\n  return questions.filter(\r\n    (q) =>\r\n      q.title.toLowerCase().indexOf(critera.toLowerCase()) >= 0 ||\r\n      q.content.toLowerCase().indexOf(critera.toLowerCase()) >= 0,\r\n  );\r\n};\r\n\r\nexport interface PostQuestionData {\r\n  title: string;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nexport const postQuestion = async (\r\n  question: PostQuestionData,\r\n): Promise<QuestionData | undefined> => {\r\n  await wait(500);\r\n  const questionId = Math.max(...questions.map((q) => q.questionId)) + 1;\r\n  const newQuestion: QuestionData = {\r\n    ...question,\r\n    questionId,\r\n    answers: [],\r\n  };\r\n  questions.push(newQuestion);\r\n  return newQuestion;\r\n};\r\n\r\nexport interface PostAnswerData {\r\n  questionId: number;\r\n  content: string;\r\n  userName: string;\r\n  created: Date;\r\n}\r\n\r\nexport const postAnswer = async (\r\n  answer: PostAnswerData,\r\n): Promise<AnswerData | undefined> => {\r\n  await wait(500);\r\n  const question = questions.filter(\r\n    (q) => q.questionId === answer.questionId,\r\n  )[0];\r\n  const answerInQuestion: AnswerData = { answerId: 99, ...answer };\r\n  question.answers.push(answerInQuestion);\r\n  return answerInQuestion;\r\n};\r\n","C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\QuestionList.tsx",["89"],"/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react';\r\nimport React from 'react';\r\nimport { QuestionData } from './QuestionsData';\r\nimport { Question } from './Question';\r\nimport { accent2, gray1, gray5 } from './Styles';\r\n\r\ninterface Props {\r\n  data: QuestionData[];\r\n  renderItem?: (item: QuestionData) => JSX.Element;\r\n}\r\n\r\nexport const QuestionList = ({ data, renderItem }: Props) => (\r\n  <ul\r\n    css={css`\r\n      list-style: none;\r\n      margin: 10px 0 0 0;\r\n      background-color: #fff;\r\n      border-bottom-left-radius: 4px;\r\n      border-bottom-right-radius: 4px;\r\n      border-top: 3px solid ${accent2};\r\n      box-shadow: 0 3px 5px 0 rgba(0, 0, 0, 0.16);\r\n    `}\r\n  >\r\n    {data.map((question) => (\r\n      <li\r\n        key={question.questionId}\r\n        css={css`\r\n          border-top: 1px solid ${gray5};\r\n          ::first-of-type {\r\n            border-top: none;\r\n          }\r\n        `}\r\n      >\r\n        {renderItem ? renderItem(question) : <Question data={question} />}\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n","C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\Iconss.tsx",[],"C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\Question.tsx",[],"C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\Page.tsx",[],"C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\PageTitle.tsx",[],"C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\Styles.ts",[],"C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\SearchPage.tsx",["90"],"C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\AskPage.tsx",["91"],"import React from 'react';\r\nimport { Page } from './Page';\r\nimport {\r\n  Fieldset,\r\n  FieldContainer,\r\n  FieldLabel,\r\n  FieldInput,\r\n  FieldTextArea,\r\n  FormButtonContainer,\r\n  PrimaryButton,\r\n  FieldError,\r\n  SubmissionSuccess,\r\n} from './Styles';\r\nimport { useForm, useFormState } from 'react-hook-form';\r\nimport { postQuestion } from './QuestionsData';\r\n\r\ntype FormData = {\r\n  title: string;\r\n  content: string;\r\n};\r\n\r\nexport const AskPage = () => {\r\n  const [successfullySubmited, setSuccessfullySubmitet] = React.useState(false);\r\n  const {\r\n    register,\r\n    formState: { errors, isSubmitting },\r\n    handleSubmit,\r\n  } = useForm<FormData>({ mode: 'onBlur' });\r\n  const submitform = async (data: FormData) => {\r\n    const result = await postQuestion({\r\n      title: data.title,\r\n      content: data.content,\r\n      userName: 'Fred',\r\n      created: new Date(),\r\n    });\r\n    setSuccessfullySubmitet(result ? true : false);\r\n  };\r\n  return (\r\n    <Page title=\"Ask a question\">\r\n      <form onSubmit={handleSubmit(submitform)}>\r\n        <Fieldset disabled={isSubmitting || successfullySubmited}>\r\n          <FieldContainer>\r\n            <FieldLabel htmlFor=\"title\">Title</FieldLabel>\r\n            <FieldInput\r\n              id=\"title\"\r\n              type=\"text\"\r\n              {...register('title', { required: true, minLength: 10 })}\r\n            />\r\n            {errors.title && errors.title.type === 'required' && (\r\n              <FieldError>You must enter the question title</FieldError>\r\n            )}\r\n            {errors.title && errors.title.type === 'minLength' && (\r\n              <FieldError>The title must be at least 10 characters</FieldError>\r\n            )}\r\n          </FieldContainer>\r\n          <FieldContainer>\r\n            <FieldLabel htmlFor=\"content\">Content</FieldLabel>\r\n            <FieldTextArea\r\n              id=\"content\"\r\n              {...register('content', { required: true, minLength: 50 })}\r\n            />\r\n            {errors.content && errors.content.type === 'required' && (\r\n              <FieldError>You must enter the question content</FieldError>\r\n            )}\r\n            {errors.content && errors.content.type === 'minLength' && (\r\n              <FieldError>\r\n                The content must be at least 50 characters\r\n              </FieldError>\r\n            )}\r\n          </FieldContainer>\r\n          <FormButtonContainer>\r\n            <PrimaryButton type=\"submit\">Submit Your Question</PrimaryButton>\r\n          </FormButtonContainer>\r\n          {successfullySubmited && (\r\n            <SubmissionSuccess>\r\n              Your question was successfully submited\r\n            </SubmissionSuccess>\r\n          )}\r\n        </Fieldset>\r\n      </form>\r\n    </Page>\r\n  );\r\n};\r\nexport default AskPage;\r\n","C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\SignInPage.tsx",[],"C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\NotFoundPage.tsx",[],"C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\QuestionPage.tsx",["92","93"],"C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\AnswerList.tsx",[],"C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\Answer.tsx",[],"C:\\Users\\Gëzim\\source\\repos\\Quiz\\front\\src\\store.ts",[],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":3,"column":10,"nodeType":"100","messageId":"101","endLine":3,"endColumn":16},{"ruleId":"98","severity":1,"message":"102","line":6,"column":19,"nodeType":"100","messageId":"101","endLine":6,"endColumn":24},{"ruleId":"98","severity":1,"message":"103","line":15,"column":27,"nodeType":"100","messageId":"101","endLine":15,"endColumn":39},{"ruleId":"98","severity":1,"message":"104","line":14,"column":19,"nodeType":"100","messageId":"101","endLine":14,"endColumn":31},{"ruleId":"98","severity":1,"message":"105","line":21,"column":3,"nodeType":"100","messageId":"101","endLine":21,"endColumn":35},{"ruleId":"98","severity":1,"message":"106","line":23,"column":3,"nodeType":"100","messageId":"101","endLine":23,"endColumn":31},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"@typescript-eslint/no-unused-vars","'Answer' is defined but never used.","Identifier","unusedVar","'gray1' is defined but never used.","'QuestionData' is defined but never used.","'useFormState' is defined but never used.","'gettingUnansweredQuestionsAction' is defined but never used.","'gotUnansweredQuestionsAction' is defined but never used.","no-global-assign","no-unsafe-negation"]